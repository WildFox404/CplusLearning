//
// Created by 3220429027 on 2024/8/28.
//
//重载左移运算符（<<）用于输出自定义对象的成员变量，在实际开发中很有价值（调试和日志）。
//只能使用非成员函数版本。
//如果要输出对象的私有成员，可以配合友元一起使用。
//示例：
#include <iostream>         // 包含头文件。
using namespace std;        // 指定缺省的命名空间。

class CGirl       // 超女类CGirl。
{
    friend ostream& operator<<(ostream& cout, const CGirl& g);
    string    m_name;   // 姓名。
    int         m_xw;        // 胸围。
    int         m_score;    // 评分。
public:
    // 默认构造函数。
    CGirl() { m_name = "西施";  m_xw = 87;  m_score = 30; }

    // 自我介绍的方法。
    void show() { cout << "姓名：" << m_name << "，胸围：" << m_xw << "，评分：" << m_score << endl; }
};

ostream& operator<<(ostream& cout, const CGirl& g)
{
    cout << "姓名：" << g.m_name << "，胸围：" << g.m_xw << "，评分：" << g.m_score;
    return cout;
}

int main()
{
    CGirl g;
    cout << g << endl;
}

//使用友元函数来实现这一点有几个好处：
//
//1. 访问私有成员
//        友元函数可以直接访问类的私有成员和保护成员，这使得在输出对象时能够直接读取其内部状态，而不需要提供公共的访问函数。这对于封装性和数据隐藏是有益的。
//
//2. 简化代码
//        通过使用友元函数，可以避免在类中添加额外的公共方法来获取私有成员的值，从而保持类的接口简洁。这使得类的设计更加清晰，减少了不必要的公共方法。
//
//3. 提高效率
//        友元函数直接访问私有数据，避免了通过公共方法进行访问时可能产生的额外开销，尤其是在需要频繁访问对象内部状态的情况下。
//
//4. 逻辑清晰
//        将输出逻辑放在友元函数中，可以使得输出操作与类的其他逻辑分离，提高代码的可读性和可维护性。这样，输出的实现与类的内部实现相对独立。